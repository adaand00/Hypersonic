#ifndef EFFECTS_SATURATIO_H_
#define EFFECTS_SATURATIO_H_

#include "utils/generic_effect_sampled.h"

// Creates a saturation effect following something similar to:

// .............................................................#..................................................................
// ....................................MAX POSSIBLE OUTPUT...#######...............................................................
// .............................................................#............ Clipping apex........................................
// .............................................................#...................I..............................................
// .............................................................#...................I..............................................
// .............................................................#...................V..............................................
// ...............................................hard_level...###..................*.......####################################...
// .............................................................#.......................####.......................................
// .............................................................#....................###...........................................
// .............................................................#..................##..............................................
// .............................................................#................##................................................
// ...............................................soft_level...###..............#..................................................
// .............................................................#..............#...................................................
// .............................................................#.............#....................................................
// .............................................................#............#.....................................................
// .............................................................#...........#......................................................
// .............................................................#..........#.......................................................
// .............................................................#.........#........................................................
// .............................................................#........#.........................................................
// .............................................................#.......#..........................................................
// .............................................................#......#...........................................................
// .............................................................#.....#............................................................
// .............................................................#....#.............................................................
// .............................................................#...#..............................................................
// .............................................................#..#...............................................................
// .............................................................#.#................................................................
// .............................................................##..............#...*.......#......................................
// #################################################################################*###########################################...
// ............................................................##...............#...*.......#......................................
// ...........................................................#.#...........soft_clip...hard_clip..................................
// ..........................................................#..#..................................................................
// .........................................................#...#..................................................................
// ......................................................###....#..................................................................
// ....................................................##.......#..................................................................
// ..................................................##.........#..................................................................
// ................................................##...........#..................................................................
// ............................................####.............#..................................................................
// .....................................#######.................#..................................................................
// #####################################.......................###...low_clip......................................................
// .............................................................#..................................................................
// .............................................................#..................................................................

class Saturation : public GenericEffectSampled{
    /*
    Pots:

    Clipping: Input level to engage clipping (clipping apex) (0: no clipping, 10: clip immediately)

    Smoothness: Clip "discontinously" or smoothly begin clipping (0: pointy corner, 10: no straight lines)

    Squareness: Gain before soft clipping (0: 1:1 ratio, 10: Square wave)

    Evenness: How even or odd the curve should be   (0: Completely odd (odd harmonics)),
                                                     5: negative inputs are put to zero (even harmonics with fund. freq),
                                                    10: completely even with double the fundamental frequency (rectification))

    */
private:       
    static constexpr float TANPI_8_INV = M_SQRT2 + 1;
    
    // Draw constants
    static constexpr int x0 = 0;
    static constexpr int y0 = 0;
    static constexpr int w = 64;
    static constexpr int h = 64;

    static constexpr float x_step = 2.0f/w;
    static constexpr float y_step = h/2.0f;

public:

    Saturation(){
        params_[0].config(0.01,1,1,PARAM_EXP, "Clip level");
        params_[1].config(1,0,0.5f,PARAM_LINEAR, "Hardness");
        params_[2].config(1,0,0,PARAM_LINEAR, "Asymmetry");

        name_.assign("Saturation");
    }

    float dsp(float sample) override {
        // See https://www.geogebra.org/calculator/ynjbbcu8 for equations
        // "smooth" part is modeled as an arc

        bool neg = false;

        // Get parameter values
        float clip = getParam(0);
        float hard = getParam(1);
        float asym = getParam(2);
        
        // gain
        float x = sample / clip;

        if(sample < 0)
        {
            x = -x / asym;
            neg = true;
        }

        // Hardness
        float s = hard * M_SQRT2;

        // Circle radius
        float r = s * TANPI_8_INV;

        float soft_start = 1 - hard;
        float soft_end = s+1;

        // Map to curve
        if(x > soft_end){
            x = 1;
        }else if(x > soft_start){
            x = sqrt((r+x-1-s)*(r-x+1+s)) + 1-r;
        }

        x = x * getParam(0);

        if(neg){
            x= -x*getParam(2);
        }

        return x;
    }

    void  draw_screen(TFT_eSprite * display) override{
        /*
        display->setCursor(0,15);
        display->print("CLIP: ");
        display->print(InputValues[0]);
        
        display->setCursor(0,25);
        display->print("SMTH: ");
        display->print(InputValues[1]);
        
        display->setCursor(0,35);
        display->print("SQRN: ");
        display->print(InputValues[2]);
        
        display->setCursor(0,45);
        display->print("EVEN: ");
        display->print(InputValues[3]);
        */

        display->drawFastHLine(x0, h/2 +y0, w, 1); // x-axis
        display->drawFastVLine(w/2+x0, y0, h, 1); // y-axis

        display->drawRect(x0, y0, w, h, 1); // box

        uint8_t last_y = 0;

        // feed -1 .. 1 into DSP, display on screen
        for(uint8_t x = 0; x<w; x++){
            float xf = -1 + x * x_step;
            float yf = dsp(xf);
            uint8_t y = h - (uint8_t) ((yf+1.0f) * y_step);
            display->drawPixel(x+x0,y+y0,1);

            if(last_y - y > 1) // if more than one step in y, fill with line
            {
                display->drawFastVLine(x+x0, last_y-1+y0, last_y-y, 1);
            }
            last_y = y;
        }
    }
};


#endif /* EFFECTS_SATURATIO_H_ */
